#include "processing.h"
#include "common.h"
#include <math.h>

#define inputChannelLeft 0
#define inputChannelRight 1

#define output_Channel_L 0
#define output_Channel_C 1
#define output_Channel_LS 2
#define output_Channel_RS 3
#define output_Channel_R 4
#define output_Channel_LFE 5

double preGain;

static const double limiterThreshold = 0.999;

static double dbConvert(const double value);
static double saturation(const double in);

static double history_def[6][n_coeff];
static unsigned int p_state_def[6];

static int enable = 1;
static int mode = 0;

double coeffs_hpf_800Hz[n_coeff] = {
-0.00316622707854720970,
        -0.00360682240777098410,
        -0.00408710197815540920,
        -0.00460872088614302810,
        -0.00517317511600128620,
        -0.00578176181366949100,
        -0.00643553570259188230,
        -0.00713526154125337410,
        -0.00788136255134137300,
        -0.00867386477977093170,
        -0.00951233739758824450,
        -0.01039582898436995800,
        -0.01132279989846925900,
        -0.01229105089164069000,
        -0.01329764819145986200,
        -0.01433884534677711500,
        -0.01541000221038987800,
        -0.01650550151930241900,
        -0.01761866362642134200,
        -0.01874166003828908700,
        -0.01986542652137372100,
        -0.02097957665429432700,
        -0.02207231682483635700,
        -0.02313036379827034000,
        -0.02413886611669202600,
        -0.02508133072716470900,
        -0.02593955637841095400,
        -0.02669357547060610000,
        -0.02732160618918936700,
        -0.02780001690004550400,
        -0.02810330492822414200,
        0.97160003987407328000,
        -0.02810330492822414200,
        -0.02780001690004550400,
        -0.02732160618918936700,
        -0.02669357547060610000,
        -0.02593955637841095400,
        -0.02508133072716470900,
        -0.02413886611669202600,
        -0.02313036379827034000,
        -0.02207231682483635700,
        -0.02097957665429432700,
        -0.01986542652137372100,
        -0.01874166003828908700,
        -0.01761866362642134200,
        -0.01650550151930241900,
        -0.01541000221038987800,
        -0.01433884534677711500,
        -0.01329764819145986200,
        -0.01229105089164069000,
        -0.01132279989846925900,
        -0.01039582898436995800,
        -0.00951233739758824450,
        -0.00867386477977093170,
        -0.00788136255134137300,
        -0.00713526154125337410,
        -0.00643553570259188230,
        -0.00578176181366949100,
        -0.00517317511600128620,
        -0.00460872088614302810,
        -0.00408710197815540920,
        -0.00360682240777098410,
        -0.00316622707854720970,
        -0.00276353777472146660
};

double coeffs_lpf_18kHz[n_coeff] = {
-0.00000000078811309334,
        0.00000000459449651027,
        -0.00000001082145105039,
        0.00000001690779028121,
        -0.00000001498272246723,
        -0.00000000973533558256,
        0.00000007538366408270,
        -0.00000018806459460074,
        0.00000030825143649414,
        -0.00000030151963327792,
        -0.00000009884660792145,
        0.00000124475547061359,
        -0.00000331636037307894,
        0.00000571828653490450,
        -0.00000612596401920330,
        -0.00000038846728257926,
        0.00002086943823850771,
        -0.00006020802221928960,
        0.00011000658586704244,
        -0.00012920269425582487,
        0.00002234026989241978,
        0.00036220496007964998,
        -0.00116534792243818700,
        0.00230526980269552980,
        -0.00304206678659840360,
        0.00131978200087745240,
        0.00687796989129466680,
        -0.02747195698724110700,
        0.06623356996687372600,
        -0.12299533637713553000,
        0.18089698082410743000,
        0.79343642558073291000,
        0.18089698082410743000,
        -0.12299533637713553000,
        0.06623356996687372600,
        -0.02747195698724110700,
        0.00687796989129466680,
        0.00131978200087745240,
        -0.00304206678659840360,
        0.00230526980269552980,
        -0.00116534792243818700,
        0.00036220496007964998,
        0.00002234026989241978,
        -0.00012920269425582487,
        0.00011000658586704244,
        -0.00006020802221928960,
        0.00002086943823850771,
        -0.00000038846728257926,
        -0.00000612596401920330,
        0.00000571828653490450,
        -0.00000331636037307894,
        0.00000124475547061359,
        -0.00000009884660792145,
        -0.00000030151963327792,
        0.00000030825143649414,
        -0.00000018806459460074,
        0.00000007538366408270,
        -0.00000000973533558256,
        -0.00000001498272246723,
        0.00000001690779028121,
        -0.00000001082145105039,
        0.00000000459449651027,
        -0.00000000078811309334,
        -0.00000000073932950288
};

double coeffs_bpf[n_coeff] = {
    0.00051585421475756150,
        0.00037829940828977619,
        0.00018509088676076961,
        -0.00007385433359121115,
        -0.00040944831907882947,
        -0.00083334199506689751,
        -0.00135779159409429300,
        -0.00199548091498102190,
        -0.00275928944083974130,
        -0.00366197715789331370,
        -0.00471582330394870480,
        -0.00593227170956588200,
        -0.00732129629314475470,
        -0.00889053088789169830,
        -0.01064547852222228400,
        -0.01258899653885877700,
        -0.01471572339076930400,
        -0.01701549974169424400,
        -0.01949052523059831300,
        -0.02211076512496125800,
        -0.02477401648478391000,
        -0.02757095509380784100,
        -0.03066012935930801500,
        -0.03305023711049896700,
        -0.03471903136254791300,
        -0.04044816132345094300,
        -0.04371269929739883500,
        -0.02521068267290438700,
        -0.04797702947312167100,
        -0.14997741955561741000,
        0.24048757138350532000,
        0.69331561432950528000,
        0.24048757138350532000,
        -0.14997741955561741000,
        -0.04797702947312167100,
        -0.02521068267290438700,
        -0.04371269929739883500,
        -0.04044816132345094300,
        -0.03471903136254791300,
        -0.03305023711049896700,
        -0.03066012935930801500,
        -0.02757095509380784100,
        -0.02477401648478391000,
        -0.02211076512496125800,
        -0.01949052523059831300,
        -0.01701549974169424400,
        -0.01471572339076930400,
        -0.01258899653885877700,
        -0.01064547852222228400,
        -0.00889053088789169830,
        -0.00732129629314475470,
        -0.00593227170956588200,
        -0.00471582330394870480,
        -0.00366197715789331370,
        -0.00275928944083974130,
        -0.00199548091498102190,
        -0.00135779159409429300,
        -0.00083334199506689751,
        -0.00040944831907882947,
        -0.00007385433359121115,
        0.00018509088676076961,
        0.00037829940828977619,
        0.00051585421475756150,
        0.00060695555446849624
};



static double dbConvert(const double value) {
	return pow(10.0, value / 20.0);
}

static double saturation(const double in) {
	if (in > limiterThreshold)
	{
		return limiterThreshold;
	}
	else if (in < -limiterThreshold)
	{
		return -limiterThreshold;
	}

	return in;
}

double initProcessing(double preGainValue) {
	preGain = dbConvert(preGainValue);
	return preGain;
}

double fir_circular(double input, int index, double coeffs[])
{
	int i;
	unsigned int state;
	double ret_val;

	double* history = history_def[index];
	unsigned int* p_state = &p_state_def[index];

	state = *p_state;               /* copy the filter's state to a local */

	/* store input at the beginning of the delay line */
	history[state] = input;
	if (++state >= n_coeff)
	{         /* incr state and check for wrap */
		state = 0;
	}

	/* calc FIR and shift data */
	ret_val = 0;
	for (i = n_coeff - 1; i >= 0; i--)
	{
		ret_val += coeffs[i] * history[state];
		if (++state >= n_coeff) /* incr state and check for wrap */
		{
			state = 0;
		}
	}

	*p_state = state;               /* return new state to caller */

	return ret_val;
}

void processing(double pIn[][BLOCK_SIZE], double pOut[][BLOCK_SIZE], const double LchGain, const double RchGain, const int mode, const int nSamples) {

	double preGains[INPUT_NUM_CHANNELS] = { LchGain, RchGain };

	double* samplePtrOut;


	for (int i = 0; i < nSamples; i++) {
		double tempSample[2];

		tempSample[inputChannelLeft] = pIn[inputChannelLeft][i] * preGains[inputChannelLeft];
		tempSample[inputChannelRight] = pIn[inputChannelRight][i] * preGains[inputChannelRight];

		samplePtrOut = *pOut + i + ((1 - mode) * BLOCK_SIZE);

		*samplePtrOut = tempSample[inputChannelLeft];
		samplePtrOut += BLOCK_SIZE;

		*samplePtrOut = fir_circular(tempSample[inputChannelLeft], 0, coeffs_lpf_18kHz);
		samplePtrOut += BLOCK_SIZE;

		*samplePtrOut = fir_circular(tempSample[inputChannelLeft], 1, coeffs_hpf_800Hz);
		samplePtrOut += BLOCK_SIZE;
		*samplePtrOut = fir_circular(tempSample[inputChannelLeft], 2, coeffs_bpf);
		samplePtrOut += BLOCK_SIZE;

		*samplePtrOut = fir_circular(tempSample[inputChannelRight], 3, coeffs_bpf);
		samplePtrOut += BLOCK_SIZE;

		*samplePtrOut = fir_circular(tempSample[inputChannelRight], 4, coeffs_hpf_800Hz);
		samplePtrOut += BLOCK_SIZE;

		*samplePtrOut = fir_circular(tempSample[inputChannelRight], 5, coeffs_lpf_18kHz);
		samplePtrOut += BLOCK_SIZE;
	}
}